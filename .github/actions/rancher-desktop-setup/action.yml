name: "Rancher Desktop Setup"
description: "Sets up Rancher Desktop"
inputs:
  runner:
    description: "The runner type (e.g., macos-latest)"
    required: true
runs:
  using: "composite"
  steps:
    - name: Rancher Desktop constraints
      shell: bash
      run: |
        if [[ ! "${{ inputs.runner }}" =~ ^macos.* ]]; then
          echo "::error::Rancher Desktop is only supported on macOS"
          exit 1
        fi
    - name: Rancher Desktop setup
      shell: bash
      run: |
        brew install docker docker-compose
        brew install --cask rancher

        TIMEOUT_SECS_CLI_TOOLS=60
        TIMEOUT_SECS_USER_SOCKET=300

        echo "Open Rancher Desktop app"
        open "/Applications/Rancher Desktop.app"

        echo "Wait max of ${TIMEOUT_SECS_CLI_TOOLS}s for Rancher Desktop to create CLI tools"
        for i in $(seq 1 ${TIMEOUT_SECS_CLI_TOOLS}); do
            if [ -e "$HOME/.rd/bin/rdctl" ]; then
              echo "Rancher Desktop CLI tools created after ${i}s"
              break
            fi
            sleep 1
        done

        if [ ! -e "$HOME/.rd/bin/rdctl" ]; then
          echo "Rancher Desktop CLI tools not found"
          exit 1
        fi

        echo "Rancher Desktop initialised successfully, now configure the container runtime"
        $HOME/.rd/bin/rdctl set \
          --container-engine.name=moby \
          --application.admin-access=false \
          --kubernetes.enabled=false \
          --application.start-in-background=true \
          --application.path-management-strategy=manual \
          --virtual-machine.number-cpus=3 \
          --virtual-machine.memory-in-gb=14 \
          || true

        echo "Restart Rancher Desktop"
        $HOME/.rd/bin/rdctl shutdown
        $HOME/.rd/bin/rdctl start

        echo "Wait max of ${TIMEOUT_SECS_USER_SOCKET}s for Rancher socket"

        for i in $(seq 1 ${TIMEOUT_SECS_USER_SOCKET}); do
            if [ -e "$HOME/.rd/docker.sock" ]; then
              echo "Rancher Desktop socket created after ${i}s"
              break
            fi
            sleep 1
        done

        if [ ! -e "$HOME/.rd/docker.sock" ]; then
          echo "Rancher Desktop socket not found"
          exit 1
        fi

        echo "{}" > $HOME/.docker/config.json

        echo "DOCKER_HOST=unix://${HOME}/.rd/docker.sock" >> $GITHUB_ENV
        echo "TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE=/var/run/docker.sock" >> $GITHUB_ENV
        echo "NODE_OPTIONS=--dns-result-order=ipv4first" >> $GITHUB_ENV
