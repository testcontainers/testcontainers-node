name: Test
run-name: "Runner (${{ inputs.runner }}) / Node (${{ inputs.node-version }}) / Runtime (${{ inputs.container-runtime }}) / Workspace (${{ inputs.workspace }})"

on:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
      node-version:
        required: true
        type: string
      container-runtime:
        required: true
        type: string
      workspace:
        required: true
        type: string

jobs:
  test:
    name: "Runner (${{ inputs.runner }}) / Node (${{ inputs.node-version }}) / Runtime (${{ inputs.container-runtime }}) / Workspace (${{ inputs.workspace }})"
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Docker rootless setup 1/2
        if: ${{ inputs.container-runtime == 'docker-rootless' }}
        uses: ScribeMD/rootless-docker@0.2.2
      - name: Docker rootless setup 2/2
        if: ${{ inputs.container-runtime == 'docker-rootless' }}
        run: |
          sudo rm -rf /var/run/docker.sock
          echo "CI_ROOTLESS=true" >> $GITHUB_ENV

      - name: Podman setup
        if: ${{ inputs.container-runtime == 'podman' }}
        run: |
          curl -fsSL "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_$(lsb_release -rs)/Release.key" | gpg --dearmor | sudo tee /etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg > /dev/null
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_$(lsb_release -rs)/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list > /dev/null
          sudo apt-get update
          sudo apt-get -y install podman
          systemctl enable --now --user podman podman.socket
          podman info
          echo "DOCKER_HOST=unix://${XDG_RUNTIME_DIR}/podman/podman.sock" >> $GITHUB_ENV
          echo "CI_ROOTLESS=true" >> $GITHUB_ENV
          echo "CI_PODMAN=true" >> $GITHUB_ENV

      - name: Colima constraints
        if: ${{ inputs.container-runtime == 'colima' && !startsWith(inputs.runner, 'macos') }}
        run: |
          run: echo "::error::Colima is only supported on macOS"
          exit 1
      - name: Colima setup
        if: ${{ inputs.container-runtime == 'colima' }}
        run: |
          brew install docker docker-compose colima
          colima start --cpu 3 --memory 14 --disk 14 --runtime docker
          colima status
          colima --version
          echo "DOCKER_HOST=unix://${HOME}/.colima/default/docker.sock" >> $GITHUB_ENV
          echo "TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE=/var/run/docker.sock" >> $GITHUB_ENV
          echo "NODE_OPTIONS=--dns-result-order=ipv4first" >> $GITHUB_ENV

      - name: Rancher Desktop constraints
        if: ${{ inputs.container-runtime == 'rancher-desktop' && !startsWith(inputs.runner, 'macos') }}
        run: |
          run: echo "::error::Rancher Desktop is only supported on macOS"
          exit 1
      - name: Rancher Desktop setup
        if: ${{ inputs.container-runtime == 'rancher-desktop' }}
        run: |
          brew install docker docker-compose
          brew install --cask rancher
          
          TIMEOUT_SECS_CLI_TOOLS=60
          TIMEOUT_SECS_USER_SOCKET=300
          
          echo "Open Rancher Desktop app"
          open "/Applications/Rancher Desktop.app"
          
          echo "Wait max of ${TIMEOUT_SECS_CLI_TOOLS}s for Rancher Desktop to create CLI tools"
          for i in $(seq 1 ${TIMEOUT_SECS_CLI_TOOLS}); do
              if [ -e "$HOME/.rd/bin/rdctl" ]; then
                echo "Rancher Desktop CLI tools created after ${i}s"
                break
              fi
              sleep 1
          done
          
          if [ ! -e "$HOME/.rd/bin/rdctl" ]; then
            echo "Rancher Desktop CLI tools not found"
            exit 1
          fi
          
          echo "Rancher Desktop initialised successfully, now configure the container runtime"
          $HOME/.rd/bin/rdctl set \
            --container-engine.name=moby \
            --application.admin-access=false \
            --kubernetes.enabled=false \
            --application.start-in-background=true \
            --application.path-management-strategy=manual \
            --virtual-machine.number-cpus=3 \
            --virtual-machine.memory-in-gb=14 \
            || true
          
          echo "Restart Rancher Desktop"
          $HOME/.rd/bin/rdctl shutdown
          $HOME/.rd/bin/rdctl start
          
          echo "Wait max of ${TIMEOUT_SECS_USER_SOCKET}s for Rancher socket"
          
          for i in $(seq 1 ${TIMEOUT_SECS_USER_SOCKET}); do
              if [ -e "$HOME/.rd/docker.sock" ]; then
                echo "Rancher Desktop socket created after ${i}s"
                break
              fi
              sleep 1
          done
          
          if [ ! -e "$HOME/.rd/docker.sock" ]; then
            echo "Rancher Desktop socket not found"
            exit 1
          fi
          
          echo "{}" > $HOME/.docker/config.json
          
          echo "DOCKER_HOST=unix://${HOME}/.rd/docker.sock" >> $GITHUB_ENV
          echo "TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE=/var/run/docker.sock" >> $GITHUB_ENV
          echo "NODE_OPTIONS=--dns-result-order=ipv4first" >> $GITHUB_ENV

      - name: Code checkout
        uses: actions/checkout@v3

      - name: Install NodeJS ${{ inputs.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install dependencies
        run: npm ci --omit=optional

      - name: Run tests
        run: npm run test:ci -- ${{ inputs.workspace }}
