name: Test

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'mkdocs.yml'
      - 'docs/**'
      - 'README.md'

jobs:
  docker:
    runs-on: ${{ matrix.os-version }}
    strategy:
      fail-fast: false
      matrix:
        os-version: [ ubuntu-22.04 ]
        node-version: [ 16.x, 18.x, 20.x ]
    steps:
      - name: Code checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Fetch main branch
        run: git fetch origin main
      - name: Install NodeJS ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm ci --omit=optional
      - name: Run tests
        run: npm run test:ci
      - name: SonarCloud scan
        if: ${{ matrix.node-version == '20.x' }}
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  docker-rootless:
    runs-on: ${{ matrix.os-version }}
    strategy:
      fail-fast: false
      matrix:
        os-version: [ ubuntu-22.04 ]
        node-version: [ 16.x, 18.x, 20.x ]
    steps:
      - name: Code checkout
        uses: actions/checkout@v3
      - name: Setup rootless Docker
        uses: ScribeMD/rootless-docker@0.2.2
      - name: Remove Docket root socket
        run: sudo rm -rf /var/run/docker.sock
      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm ci --omit=optional
      - name: Run tests
        run: npm run test:ci
        env:
          CI_ROOTLESS: true

  podman:
    runs-on: ${{ matrix.os-version }}
    strategy:
      fail-fast: false
      matrix:
        os-version: [ ubuntu-22.04 ]
        node-version: [ 16.x, 18.x, 20.x ]
    steps:
      - name: Code checkout
        uses: actions/checkout@v3
      - name: Setup Podman
        run: |
          curl -fsSL https://download.opensuse.org/repositories/devel:kubic:libcontainers:unstable/xUbuntu_$(lsb_release -rs)/Release.key | gpg --dearmor | sudo tee /etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg > /dev/null
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg] https://download.opensuse.org/repositories/devel:kubic:libcontainers:unstable/xUbuntu_$(lsb_release -rs)/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list > /dev/null
          sudo apt-get update
          sudo apt-get -y install podman
          systemctl enable --now --user podman podman.socket
          podman info
      - name: Set environment
        run: echo "DOCKER_HOST=unix://${XDG_RUNTIME_DIR}/podman/podman.sock" >> $GITHUB_ENV
      - name: Install NodeJS ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm ci --omit=optional
      - name: Run tests
        run: npm run test:ci
        env:
          CI_ROOTLESS: true
          CI_PODMAN: true

  colima:
    runs-on: ${{ matrix.os-version }}
    strategy:
      fail-fast: false
      matrix:
        os-version: [ macos-13 ]
        node-version: [ 16.x, 18.x, 20.x ]
    steps:
      - name: Code checkout
        uses: actions/checkout@v3
      - name: Setup Colima
        run: |
          brew install docker docker-compose colima
          colima start --cpu 3 --memory 14 --disk 14 --runtime docker 
          colima status
          colima --version
      - name: Set environment
        run: |
          echo "DOCKER_HOST=unix://${HOME}/.colima/default/docker.sock" >> $GITHUB_ENV
          echo "TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE=/var/run/docker.sock" >> $GITHUB_ENV
          echo "NODE_OPTIONS=--dns-result-order=ipv4first" >> $GITHUB_ENV
      - name: Install NodeJS ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm ci --omit=optional
      - name: Run tests
        run: npm run test:ci -- generic-container.test.ts

  rancher-desktop:
    runs-on: ${{ matrix.os-version }}
    strategy:
      fail-fast: false
      matrix:
        os-version: [ macos-13 ]
        node-version: [ 16.x, 18.x, 20.x ]
    steps:
      - name: Code checkout
        uses: actions/checkout@v3
      - name: Setup Rancher Desktop
        run: |
          brew install docker docker-compose
          brew install --cask rancher
          
          TIMEOUT_SECS_CLI_TOOLS=60
          TIMEOUT_SECS_USER_SOCKET=300
          
          echo "Open Rancher Desktop app"
          open "/Applications/Rancher Desktop.app"
          
          echo "Wait max of ${TIMEOUT_SECS_CLI_TOOLS}s for Rancher Desktop to create CLI tools"
          for i in $(seq 1 ${TIMEOUT_SECS_CLI_TOOLS}); do
              if [ -e "$HOME/.rd/bin/rdctl" ]; then
                echo "Rancher Desktop CLI tools created after ${i}s"
                break
              fi
              sleep 1
          done
          
          if [ ! -e "$HOME/.rd/bin/rdctl" ]; then
            echo "Rancher Desktop CLI tools not found"
            exit 1
          fi
          
          echo "Rancher Desktop initialised successfully, now configure the container runtime"
          $HOME/.rd/bin/rdctl set \
            --container-engine.name=moby \
            --application.admin-access=false \
            --kubernetes.enabled=false \
            --application.start-in-background=true \
            --application.path-management-strategy=manual \
            --virtual-machine.number-cpus=3 \
            --virtual-machine.memory-in-gb=14 \
            || true
          
          echo "Restart Rancher Desktop"
          $HOME/.rd/bin/rdctl shutdown
          $HOME/.rd/bin/rdctl start
          
          echo "Wait max of ${TIMEOUT_SECS_USER_SOCKET}s for Rancher socket"
          
          for i in $(seq 1 ${TIMEOUT_SECS_USER_SOCKET}); do
              if [ -e "$HOME/.rd/docker.sock" ]; then
                echo "Rancher Desktop socket created after ${i}s"
                break
              fi
              sleep 1
          done
          
          if [ ! -e "$HOME/.rd/docker.sock" ]; then
            echo "Rancher Desktop socket not found"
            exit 1
          fi
          
          echo "{}" > $HOME/.docker/config.json
      - name: Set environment
        run: |
          echo "DOCKER_HOST=unix://${HOME}/.rd/docker.sock" >> $GITHUB_ENV
          echo "TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE=/var/run/docker.sock" >> $GITHUB_ENV
          echo "NODE_OPTIONS=--dns-result-order=ipv4first" >> $GITHUB_ENV
      - name: Install NodeJS ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm ci --omit=optional
      - name: Run tests
        run: npm run test:ci -- generic-container.test.ts

  smoke-test:
    runs-on: ${{ matrix.os-version }}
    strategy:
      matrix:
        os-version: [ ubuntu-22.04 ]
        node-version: [ 16.x, 18.x, 20.x ]
    steps:
      - name: Code checkout
        uses: actions/checkout@v3
      - name: Install NodeJS ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm ci --omit=optional
      - name: Remove dev dependencies
        run: npm prune --omit=dev
      - name: Run CommonJS module smoke test
        run: node smoke-test.js
      - name: Run ES module smoke test
        run: node smoke-test.mjs